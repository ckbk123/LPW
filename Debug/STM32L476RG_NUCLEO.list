
STM32L476RG_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000478  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08000600  08000600  00010600  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08000648  08000648  00010648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  0800064c  0800064c  0001064c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  08000650  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000030  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000034  20000034  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   00000d2e  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00001e7a  00000000  00000000  00020d62  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00000607  00000000  00000000  00022bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000000c0  00000000  00000000  000231e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000120  00000000  00000000  000232a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000044b  00000000  00000000  000233c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000088f  00000000  00000000  00023813  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000a6002  00000000  00000000  000240a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000ca0a4  2**0
                  CONTENTS, READONLY
 19 .debug_frame  0000013c  00000000  00000000  000ca120  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080005e8 	.word	0x080005e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	080005e8 	.word	0x080005e8

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f000 f957 	bl	80004a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f000 f9d3 	bl	80005a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 f8d5 	bl	80003a8 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000204:	08000650 	.word	0x08000650
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000210:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000214:	20000034 	.word	0x20000034

08000218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC1_2_IRQHandler>

0800021a <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800021a:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800021c:	6803      	ldr	r3, [r0, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800021e:	fa91 f4a1 	rbit	r4, r1
 8000222:	fab4 f484 	clz	r4, r4
 8000226:	fa91 f1a1 	rbit	r1, r1
 800022a:	2503      	movs	r5, #3
 800022c:	fab1 f181 	clz	r1, r1
 8000230:	0064      	lsls	r4, r4, #1
 8000232:	fa05 f404 	lsl.w	r4, r5, r4
 8000236:	0049      	lsls	r1, r1, #1
 8000238:	ea23 0304 	bic.w	r3, r3, r4
 800023c:	fa02 f101 	lsl.w	r1, r2, r1
 8000240:	4319      	orrs	r1, r3
 8000242:	6001      	str	r1, [r0, #0]
 8000244:	bd30      	pop	{r4, r5, pc}
	...

08000248 <GPIO_init>:




void GPIO_init(void)
{
 8000248:	b513      	push	{r0, r1, r4, lr}
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 800024a:	4c17      	ldr	r4, [pc, #92]	; (80002a8 <GPIO_init+0x60>)
 800024c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800024e:	f043 0301 	orr.w	r3, r3, #1
 8000252:	64e3      	str	r3, [r4, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000254:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	9301      	str	r3, [sp, #4]
// PORT A
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
// LED verte
LL_GPIO_SetPinMode(       LED_PORT, LED_PIN, LL_GPIO_MODE_OUTPUT );
 800025c:	2201      	movs	r2, #1
 800025e:	2120      	movs	r1, #32
 8000260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  (void)tmpreg;
 8000264:	9b01      	ldr	r3, [sp, #4]
 8000266:	f7ff ffd8 	bl	800021a <LL_GPIO_SetPinMode>
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800026a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
LL_GPIO_SetPinOutputType( LED_PORT, LED_PIN, LL_GPIO_OUTPUT_PUSHPULL );

// PORT C
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOC );
// bouton bleu pin 13
LL_GPIO_SetPinMode( BUT_PORT, BUT_PIN, LL_GPIO_MODE_INPUT );
 800026e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000272:	6853      	ldr	r3, [r2, #4]
 8000274:	f023 0320 	bic.w	r3, r3, #32
 8000278:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800027a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800027c:	f043 0304 	orr.w	r3, r3, #4
 8000280:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000282:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000284:	4c09      	ldr	r4, [pc, #36]	; (80002ac <GPIO_init+0x64>)
 8000286:	f003 0304 	and.w	r3, r3, #4
 800028a:	9300      	str	r3, [sp, #0]
 800028c:	4620      	mov	r0, r4
 800028e:	2200      	movs	r2, #0
  (void)tmpreg;
 8000290:	9b00      	ldr	r3, [sp, #0]
 8000292:	f7ff ffc2 	bl	800021a <LL_GPIO_SetPinMode>

// SQUAREWAVE 50HZ
LL_GPIO_SetPinMode( OUT_50HZ_PORT, OUT_50HZ_PIN, LL_GPIO_MODE_OUTPUT);
 8000296:	2201      	movs	r2, #1
 8000298:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800029c:	4620      	mov	r0, r4
 800029e:	f7ff ffbc 	bl	800021a <LL_GPIO_SetPinMode>
}
 80002a2:	b002      	add	sp, #8
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	bf00      	nop
 80002a8:	40021000 	.word	0x40021000
 80002ac:	48000800 	.word	0x48000800

080002b0 <LED_GREEN>:


void LED_GREEN( int val )
{
 80002b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80002b4:	2220      	movs	r2, #32
if	( val )
 80002b6:	b108      	cbz	r0, 80002bc <LED_GREEN+0xc>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80002b8:	619a      	str	r2, [r3, #24]
 80002ba:	4770      	bx	lr
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80002bc:	629a      	str	r2, [r3, #40]	; 0x28
 80002be:	4770      	bx	lr

080002c0 <BLUE_BUTTON>:
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80002c0:	4b03      	ldr	r3, [pc, #12]	; (80002d0 <BLUE_BUTTON+0x10>)
 80002c2:	6918      	ldr	r0, [r3, #16]
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
}

int BLUE_BUTTON()
{
return ( !LL_GPIO_IsInputPinSet( BUT_PORT, BUT_PIN ) );
 80002c4:	f480 5000 	eor.w	r0, r0, #8192	; 0x2000
}
 80002c8:	f3c0 3040 	ubfx	r0, r0, #13, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop
 80002d0:	48000800 	.word	0x48000800

080002d4 <SystemClock_Config>:
  * @param  None
  * @retval None
  */
// Figure 15 page 208 Schema clock
void SystemClock_Config(void)
{
 80002d4:	b507      	push	{r0, r1, r2, lr}
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80002d6:	4a31      	ldr	r2, [pc, #196]	; (800039c <SystemClock_Config+0xc8>)
 80002d8:	6813      	ldr	r3, [r2, #0]
 80002da:	f023 0307 	bic.w	r3, r3, #7
 80002de:	f043 0301 	orr.w	r3, r3, #1
 80002e2:	6013      	str	r3, [r2, #0]
  * @rmtoll CR           MSIPLLEN      LL_RCC_MSI_DisablePLLMode
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_DisablePLLMode(void)
{
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80002e4:	4b2e      	ldr	r3, [pc, #184]	; (80003a0 <SystemClock_Config+0xcc>)
 80002e6:	681a      	ldr	r2, [r3, #0]
 80002e8:	f022 0204 	bic.w	r2, r2, #4
 80002ec:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80002ee:	681a      	ldr	r2, [r3, #0]
 80002f0:	f042 0208 	orr.w	r2, r2, #8
 80002f4:	601a      	str	r2, [r3, #0]
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80002f6:	681a      	ldr	r2, [r3, #0]
 80002f8:	0710      	lsls	r0, r2, #28
 80002fa:	d447      	bmi.n	800038c <SystemClock_Config+0xb8>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80002fc:	681a      	ldr	r2, [r3, #0]
 80002fe:	f042 0201 	orr.w	r2, r2, #1
 8000302:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000304:	681a      	ldr	r2, [r3, #0]
 8000306:	0791      	lsls	r1, r2, #30
 8000308:	d5fc      	bpl.n	8000304 <SystemClock_Config+0x30>
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800030a:	689a      	ldr	r2, [r3, #8]
 800030c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000310:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000312:	689a      	ldr	r2, [r3, #8]
 8000314:	f022 0203 	bic.w	r2, r2, #3
 8000318:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800031a:	689a      	ldr	r2, [r3, #8]
	{ };

/* Sysclk activation on the MSI */
LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 800031c:	f012 0f0c 	tst.w	r2, #12
 8000320:	d1fb      	bne.n	800031a <SystemClock_Config+0x46>
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000322:	689a      	ldr	r2, [r3, #8]
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000324:	491f      	ldr	r1, [pc, #124]	; (80003a4 <SystemClock_Config+0xd0>)
 8000326:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800032a:	609a      	str	r2, [r3, #8]
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800032c:	689a      	ldr	r2, [r3, #8]
 800032e:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000332:	609a      	str	r2, [r3, #8]
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000334:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000336:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800033a:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800033c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800033e:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8000342:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8000344:	9a01      	ldr	r2, [sp, #4]
 8000346:	680a      	ldr	r2, [r1, #0]
 8000348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800034c:	600a      	str	r2, [r1, #0]
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800034e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000352:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000356:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800035a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800035e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000362:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000366:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800036a:	f042 0201 	orr.w	r2, r2, #1
 800036e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8000372:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8000376:	0792      	lsls	r2, r2, #30
 8000378:	d5fb      	bpl.n	8000372 <SystemClock_Config+0x9e>
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 800037a:	681a      	ldr	r2, [r3, #0]
 800037c:	f042 0204 	orr.w	r2, r2, #4
 8000380:	601a      	str	r2, [r3, #0]
while (LL_RCC_LSE_IsReady() != 1);
LL_RCC_MSI_EnablePLLMode();


/* Update the global variable called SystemCoreClock */
SystemCoreClockUpdate();
 8000382:	f000 f8b3 	bl	80004ec <SystemCoreClockUpdate>
}
 8000386:	b003      	add	sp, #12
 8000388:	f85d fb04 	ldr.w	pc, [sp], #4
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800038c:	681a      	ldr	r2, [r3, #0]
 800038e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000392:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8000396:	601a      	str	r2, [r3, #0]
 8000398:	e7b0      	b.n	80002fc <SystemClock_Config+0x28>
 800039a:	bf00      	nop
 800039c:	40022000 	.word	0x40022000
 80003a0:	40021000 	.word	0x40021000
 80003a4:	40007000 	.word	0x40007000

080003a8 <main>:
 {
 80003a8:	b508      	push	{r3, lr}
SystemClock_Config();
 80003aa:	f7ff ff93 	bl	80002d4 <SystemClock_Config>
GPIO_init();
 80003ae:	f7ff ff4b 	bl	8000248 <GPIO_init>
SysTick_Config(SystemCoreClock/100);
 80003b2:	4b10      	ldr	r3, [pc, #64]	; (80003f4 <main+0x4c>)
 80003b4:	2264      	movs	r2, #100	; 0x64
 80003b6:	681b      	ldr	r3, [r3, #0]
 80003b8:	fbb3 f3f2 	udiv	r3, r3, r2
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003bc:	3b01      	subs	r3, #1
 80003be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003c2:	d209      	bcs.n	80003d8 <main+0x30>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003c4:	4a0c      	ldr	r2, [pc, #48]	; (80003f8 <main+0x50>)
 80003c6:	6053      	str	r3, [r2, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003c8:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <main+0x54>)
 80003ca:	21f0      	movs	r1, #240	; 0xf0
 80003cc:	f883 1023 	strb.w	r1, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003d0:	2300      	movs	r3, #0
 80003d2:	6093      	str	r3, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003d4:	2307      	movs	r3, #7
 80003d6:	6013      	str	r3, [r2, #0]
bbleu = 0;
 80003d8:	4a09      	ldr	r2, [pc, #36]	; (8000400 <main+0x58>)
 80003da:	2300      	movs	r3, #0
 80003dc:	6013      	str	r3, [r2, #0]
expe = 2;
 80003de:	4a09      	ldr	r2, [pc, #36]	; (8000404 <main+0x5c>)
 80003e0:	2102      	movs	r1, #2
 80003e2:	6011      	str	r1, [r2, #0]
led_counter = 0;
 80003e4:	4a08      	ldr	r2, [pc, #32]	; (8000408 <main+0x60>)
 80003e6:	6013      	str	r3, [r2, #0]
impulsion_base = 5;   // in 10ms
 80003e8:	4a08      	ldr	r2, [pc, #32]	; (800040c <main+0x64>)
 80003ea:	2105      	movs	r1, #5
 80003ec:	6011      	str	r1, [r2, #0]
high = 0;
 80003ee:	4a08      	ldr	r2, [pc, #32]	; (8000410 <main+0x68>)
 80003f0:	6013      	str	r3, [r2, #0]
 80003f2:	e7fe      	b.n	80003f2 <main+0x4a>
 80003f4:	20000000 	.word	0x20000000
 80003f8:	e000e010 	.word	0xe000e010
 80003fc:	e000ed00 	.word	0xe000ed00
 8000400:	20000028 	.word	0x20000028
 8000404:	20000030 	.word	0x20000030
 8000408:	20000024 	.word	0x20000024
 800040c:	20000020 	.word	0x20000020
 8000410:	2000002c 	.word	0x2000002c

08000414 <SysTick_Handler>:

// SysTick IRQ
void SysTick_Handler() {
	if (expe == 1) {
 8000414:	4b1c      	ldr	r3, [pc, #112]	; (8000488 <SysTick_Handler+0x74>)
 8000416:	6818      	ldr	r0, [r3, #0]
 8000418:	2801      	cmp	r0, #1
void SysTick_Handler() {
 800041a:	b510      	push	{r4, lr}
	if (expe == 1) {
 800041c:	d124      	bne.n	8000468 <SysTick_Handler+0x54>
		if (led_counter < impulsion_base*expe) {
 800041e:	4c1b      	ldr	r4, [pc, #108]	; (800048c <SysTick_Handler+0x78>)
 8000420:	4a1b      	ldr	r2, [pc, #108]	; (8000490 <SysTick_Handler+0x7c>)
 8000422:	6823      	ldr	r3, [r4, #0]
 8000424:	6812      	ldr	r2, [r2, #0]
 8000426:	429a      	cmp	r2, r3
 8000428:	dd14      	ble.n	8000454 <SysTick_Handler+0x40>
			LED_GREEN(1);
			++led_counter;
		}else if (led_counter < 100) {
			LED_GREEN(0);
 800042a:	f7ff ff41 	bl	80002b0 <LED_GREEN>
			++led_counter;
 800042e:	6823      	ldr	r3, [r4, #0]
 8000430:	3301      	adds	r3, #1
		}else {
			led_counter = 0;
 8000432:	6023      	str	r3, [r4, #0]
		}

		if (BLUE_BUTTON()) {
 8000434:	f7ff ff44 	bl	80002c0 <BLUE_BUTTON>
 8000438:	4b16      	ldr	r3, [pc, #88]	; (8000494 <SysTick_Handler+0x80>)
 800043a:	b118      	cbz	r0, 8000444 <SysTick_Handler+0x30>
			// change mode
			bbleu ^= 1;  // toggle bbleu
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	f082 0201 	eor.w	r2, r2, #1
 8000442:	601a      	str	r2, [r3, #0]
		}

		if (bbleu == 0) {
 8000444:	681a      	ldr	r2, [r3, #0]
 8000446:	4b14      	ldr	r3, [pc, #80]	; (8000498 <SysTick_Handler+0x84>)
 8000448:	b952      	cbnz	r2, 8000460 <SysTick_Handler+0x4c>
  * @retval None
  */
__STATIC_INLINE void LL_LPM_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800044a:	691a      	ldr	r2, [r3, #16]
 800044c:	f022 0202 	bic.w	r2, r2, #2
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8000450:	611a      	str	r2, [r3, #16]
 8000452:	bd10      	pop	{r4, pc}
		}else if (led_counter < 100) {
 8000454:	2b63      	cmp	r3, #99	; 0x63
 8000456:	dc01      	bgt.n	800045c <SysTick_Handler+0x48>
			LED_GREEN(0);
 8000458:	2000      	movs	r0, #0
 800045a:	e7e6      	b.n	800042a <SysTick_Handler+0x16>
			led_counter = 0;
 800045c:	2300      	movs	r3, #0
 800045e:	e7e8      	b.n	8000432 <SysTick_Handler+0x1e>
 8000460:	691a      	ldr	r2, [r3, #16]
 8000462:	f042 0202 	orr.w	r2, r2, #2
 8000466:	e7f3      	b.n	8000450 <SysTick_Handler+0x3c>
			LL_LPM_DisableSleepOnExit();
		}else {
			LL_LPM_EnableSleepOnExit();
		}
	}
	else if (expe == 2) {
 8000468:	2802      	cmp	r0, #2
 800046a:	d109      	bne.n	8000480 <SysTick_Handler+0x6c>
		// toggle pin
		if (high) LL_GPIO_SetOutputPin(OUT_50HZ_PORT, OUT_50HZ_PIN);
 800046c:	4b0b      	ldr	r3, [pc, #44]	; (800049c <SysTick_Handler+0x88>)
 800046e:	490c      	ldr	r1, [pc, #48]	; (80004a0 <SysTick_Handler+0x8c>)
 8000470:	681a      	ldr	r2, [r3, #0]
 8000472:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8000476:	b122      	cbz	r2, 8000482 <SysTick_Handler+0x6e>
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000478:	6188      	str	r0, [r1, #24]
		else LL_GPIO_ResetOutputPin(OUT_50HZ_PORT, OUT_50HZ_PIN);

		high ^= 1;
 800047a:	f082 0201 	eor.w	r2, r2, #1
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	bd10      	pop	{r4, pc}
  WRITE_REG(GPIOx->BRR, PinMask);
 8000482:	6288      	str	r0, [r1, #40]	; 0x28
 8000484:	e7f9      	b.n	800047a <SysTick_Handler+0x66>
 8000486:	bf00      	nop
 8000488:	20000030 	.word	0x20000030
 800048c:	20000024 	.word	0x20000024
 8000490:	20000020 	.word	0x20000020
 8000494:	20000028 	.word	0x20000028
 8000498:	e000ed00 	.word	0xe000ed00
 800049c:	2000002c 	.word	0x2000002c
 80004a0:	48000800 	.word	0x48000800

080004a4 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80004a4:	490f      	ldr	r1, [pc, #60]	; (80004e4 <SystemInit+0x40>)
 80004a6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80004aa:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80004b2:	4b0d      	ldr	r3, [pc, #52]	; (80004e8 <SystemInit+0x44>)
 80004b4:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80004b6:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80004b8:	f042 0201 	orr.w	r2, r2, #1
 80004bc:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80004be:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80004c0:	681a      	ldr	r2, [r3, #0]
 80004c2:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80004c6:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80004ca:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80004cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80004d0:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80004d8:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80004da:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80004dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80004e0:	608b      	str	r3, [r1, #8]
 80004e2:	4770      	bx	lr
 80004e4:	e000ed00 	.word	0xe000ed00
 80004e8:	40021000 	.word	0x40021000

080004ec <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, msirange = 0, pllvco = 0, pllr = 2, pllsource = 0, pllm = 2;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 80004ec:	4a27      	ldr	r2, [pc, #156]	; (800058c <SystemCoreClockUpdate+0xa0>)
 80004ee:	4928      	ldr	r1, [pc, #160]	; (8000590 <SystemCoreClockUpdate+0xa4>)
 80004f0:	6813      	ldr	r3, [r2, #0]
 80004f2:	071b      	lsls	r3, r3, #28
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8;
 80004f4:	bf54      	ite	pl
 80004f6:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	; 0x94
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4;
 80004fa:	6813      	ldrmi	r3, [r2, #0]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80004fc:	6890      	ldr	r0, [r2, #8]
{
 80004fe:	b530      	push	{r4, r5, lr}
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8;
 8000500:	bf54      	ite	pl
 8000502:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4;
 8000506:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
  msirange = MSIRangeTable[msirange];
 800050a:	4c22      	ldr	r4, [pc, #136]	; (8000594 <SystemCoreClockUpdate+0xa8>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800050c:	f000 000c 	and.w	r0, r0, #12
  msirange = MSIRangeTable[msirange];
 8000510:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000514:	280c      	cmp	r0, #12
 8000516:	d836      	bhi.n	8000586 <SystemCoreClockUpdate+0x9a>
 8000518:	e8df f000 	tbb	[pc, r0]
 800051c:	35353535 	.word	0x35353535
 8000520:	35353507 	.word	0x35353507
 8000524:	35353513 	.word	0x35353513
 8000528:	15          	.byte	0x15
 8000529:	00          	.byte	0x00
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 800052a:	4b1b      	ldr	r3, [pc, #108]	; (8000598 <SystemCoreClockUpdate+0xac>)
          pllvco = (msirange / pllm);
          break;
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
      SystemCoreClock = pllvco/pllr;
 800052c:	600b      	str	r3, [r1, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800052e:	6893      	ldr	r3, [r2, #8]
 8000530:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000534:	441c      	add	r4, r3
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000536:	680b      	ldr	r3, [r1, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8000538:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  SystemCoreClock >>= tmp;
 800053c:	40d3      	lsrs	r3, r2
 800053e:	600b      	str	r3, [r1, #0]
 8000540:	bd30      	pop	{r4, r5, pc}
      SystemCoreClock = HSE_VALUE;
 8000542:	4b16      	ldr	r3, [pc, #88]	; (800059c <SystemCoreClockUpdate+0xb0>)
 8000544:	e7f2      	b.n	800052c <SystemCoreClockUpdate+0x40>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000546:	68d0      	ldr	r0, [r2, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1 ;
 8000548:	68d3      	ldr	r3, [r2, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800054a:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1 ;
 800054e:	f3c3 1302 	ubfx	r3, r3, #4, #3
      switch (pllsource)
 8000552:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1 ;
 8000554:	f103 0301 	add.w	r3, r3, #1
      switch (pllsource)
 8000558:	d004      	beq.n	8000564 <SystemCoreClockUpdate+0x78>
 800055a:	2803      	cmp	r0, #3
 800055c:	d011      	beq.n	8000582 <SystemCoreClockUpdate+0x96>
          pllvco = (msirange / pllm);
 800055e:	fbb5 f3f3 	udiv	r3, r5, r3
          break;
 8000562:	e002      	b.n	800056a <SystemCoreClockUpdate+0x7e>
          pllvco = (HSI_VALUE / pllm);
 8000564:	480c      	ldr	r0, [pc, #48]	; (8000598 <SystemCoreClockUpdate+0xac>)
          pllvco = (HSE_VALUE / pllm);
 8000566:	fbb0 f3f3 	udiv	r3, r0, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 800056a:	68d5      	ldr	r5, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
 800056c:	68d0      	ldr	r0, [r2, #12]
 800056e:	f3c0 6041 	ubfx	r0, r0, #25, #2
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8000572:	f3c5 2506 	ubfx	r5, r5, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
 8000576:	3001      	adds	r0, #1
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 8000578:	436b      	muls	r3, r5
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
 800057a:	0040      	lsls	r0, r0, #1
      SystemCoreClock = pllvco/pllr;
 800057c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000580:	e7d4      	b.n	800052c <SystemCoreClockUpdate+0x40>
          pllvco = (HSE_VALUE / pllm);
 8000582:	4806      	ldr	r0, [pc, #24]	; (800059c <SystemCoreClockUpdate+0xb0>)
 8000584:	e7ef      	b.n	8000566 <SystemCoreClockUpdate+0x7a>
      SystemCoreClock = msirange;
 8000586:	600d      	str	r5, [r1, #0]
      break;
 8000588:	e7d1      	b.n	800052e <SystemCoreClockUpdate+0x42>
 800058a:	bf00      	nop
 800058c:	40021000 	.word	0x40021000
 8000590:	20000000 	.word	0x20000000
 8000594:	08000600 	.word	0x08000600
 8000598:	00f42400 	.word	0x00f42400
 800059c:	007a1200 	.word	0x007a1200

080005a0 <__libc_init_array>:
 80005a0:	b570      	push	{r4, r5, r6, lr}
 80005a2:	4e0d      	ldr	r6, [pc, #52]	; (80005d8 <__libc_init_array+0x38>)
 80005a4:	4c0d      	ldr	r4, [pc, #52]	; (80005dc <__libc_init_array+0x3c>)
 80005a6:	1ba4      	subs	r4, r4, r6
 80005a8:	10a4      	asrs	r4, r4, #2
 80005aa:	2500      	movs	r5, #0
 80005ac:	42a5      	cmp	r5, r4
 80005ae:	d109      	bne.n	80005c4 <__libc_init_array+0x24>
 80005b0:	4e0b      	ldr	r6, [pc, #44]	; (80005e0 <__libc_init_array+0x40>)
 80005b2:	4c0c      	ldr	r4, [pc, #48]	; (80005e4 <__libc_init_array+0x44>)
 80005b4:	f000 f818 	bl	80005e8 <_init>
 80005b8:	1ba4      	subs	r4, r4, r6
 80005ba:	10a4      	asrs	r4, r4, #2
 80005bc:	2500      	movs	r5, #0
 80005be:	42a5      	cmp	r5, r4
 80005c0:	d105      	bne.n	80005ce <__libc_init_array+0x2e>
 80005c2:	bd70      	pop	{r4, r5, r6, pc}
 80005c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005c8:	4798      	blx	r3
 80005ca:	3501      	adds	r5, #1
 80005cc:	e7ee      	b.n	80005ac <__libc_init_array+0xc>
 80005ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80005d2:	4798      	blx	r3
 80005d4:	3501      	adds	r5, #1
 80005d6:	e7f2      	b.n	80005be <__libc_init_array+0x1e>
 80005d8:	08000648 	.word	0x08000648
 80005dc:	08000648 	.word	0x08000648
 80005e0:	08000648 	.word	0x08000648
 80005e4:	0800064c 	.word	0x0800064c

080005e8 <_init>:
 80005e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005ea:	bf00      	nop
 80005ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005ee:	bc08      	pop	{r3}
 80005f0:	469e      	mov	lr, r3
 80005f2:	4770      	bx	lr

080005f4 <_fini>:
 80005f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80005f6:	bf00      	nop
 80005f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80005fa:	bc08      	pop	{r3}
 80005fc:	469e      	mov	lr, r3
 80005fe:	4770      	bx	lr
