
STM32L476RG_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08000984  08000984  00010984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  080009cc  080009cc  000109cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  080009d0  080009d0  000109d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000004  20000000  080009d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ram2         00000000  10000000  10000000  00020004  2**0
                  CONTENTS
  7 .bss          00000034  20000004  20000004  00020004  2**2
                  ALLOC
  8 ._user_heap_stack 00000400  20000038  20000038  00020004  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_line   00001444  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   00003be5  00000000  00000000  00021478  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 000008a2  00000000  00000000  0002505d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000118  00000000  00000000  00025900  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000188  00000000  00000000  00025a18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000008ce  00000000  00000000  00025ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000fec  00000000  00000000  0002646e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    000a8770  00000000  00000000  0002745a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007c  00000000  00000000  000cfbca  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00000204  00000000  00000000  000cfc48  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800096c 	.word	0x0800096c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800096c 	.word	0x0800096c

080001c8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80001c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000200 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80001cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80001ce:	e003      	b.n	80001d8 <LoopCopyDataInit>

080001d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80001d0:	4b0c      	ldr	r3, [pc, #48]	; (8000204 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80001d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80001d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80001d6:	3104      	adds	r1, #4

080001d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <LoopForever+0xa>)
	ldr	r3, =_edata
 80001da:	4b0c      	ldr	r3, [pc, #48]	; (800020c <LoopForever+0xe>)
	adds	r2, r0, r1
 80001dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80001de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80001e0:	d3f6      	bcc.n	80001d0 <CopyDataInit>
	ldr	r2, =_sbss
 80001e2:	4a0b      	ldr	r2, [pc, #44]	; (8000210 <LoopForever+0x12>)
	b	LoopFillZerobss
 80001e4:	e002      	b.n	80001ec <LoopFillZerobss>

080001e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80001e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80001e8:	f842 3b04 	str.w	r3, [r2], #4

080001ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80001ec:	4b09      	ldr	r3, [pc, #36]	; (8000214 <LoopForever+0x16>)
	cmp	r2, r3
 80001ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80001f0:	d3f9      	bcc.n	80001e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80001f2:	f000 fb19 	bl	8000828 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80001f6:	f000 fb95 	bl	8000924 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80001fa:	f000 fa01 	bl	8000600 <main>

080001fe <LoopForever>:

LoopForever:
    b LoopForever
 80001fe:	e7fe      	b.n	80001fe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000200:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000204:	080009d4 	.word	0x080009d4
	ldr	r0, =_sdata
 8000208:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800020c:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000210:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000214:	20000038 	.word	0x20000038

08000218 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000218:	e7fe      	b.n	8000218 <ADC1_2_IRQHandler>
	...

0800021c <LL_APB1_GRP1_EnableClock.constprop.8>:
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <LL_APB1_GRP1_EnableClock.constprop.8+0x1c>)
 800021e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000220:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000224:	659a      	str	r2, [r3, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
 8000228:	b082      	sub	sp, #8
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800022a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800022e:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 8000230:	9b01      	ldr	r3, [sp, #4]
}
 8000232:	b002      	add	sp, #8
 8000234:	4770      	bx	lr
 8000236:	bf00      	nop
 8000238:	40021000 	.word	0x40021000

0800023c <SystemClock_LSE_and_RTC_Config>:
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800023c:	4929      	ldr	r1, [pc, #164]	; (80002e4 <SystemClock_LSE_and_RTC_Config+0xa8>)
#define RTC_ASYNCH_PREDIV          ((uint32_t)0x7F)
/* ck_spre=ck_apre/(SYNC prediv + 1) = 1 Hz */
#define RTC_SYNCH_PREDIV           ((uint32_t)0x00FF)

/* configure the LSE and activate the RTC */
void SystemClock_LSE_and_RTC_Config() {
 800023e:	b508      	push	{r3, lr}
 8000240:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 8000244:	079b      	lsls	r3, r3, #30
 8000246:	d500      	bpl.n	800024a <SystemClock_LSE_and_RTC_Config+0xe>
 8000248:	bd08      	pop	{r3, pc}
	if	(LL_RCC_LSE_IsReady() == 0)
	{
		// enable peripheral PWR to reset entire backup domain
		LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800024a:	f7ff ffe7 	bl	800021c <LL_APB1_GRP1_EnableClock.constprop.8>
  * @rmtoll CR1          DBP           LL_PWR_EnableBkUpAccess
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableBkUpAccess(void)
{
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800024e:	4a26      	ldr	r2, [pc, #152]	; (80002e8 <SystemClock_LSE_and_RTC_Config+0xac>)
 8000250:	6813      	ldr	r3, [r2, #0]
 8000252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000256:	6013      	str	r3, [r2, #0]
  * @rmtoll BDCR         BDRST         LL_RCC_ForceBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ForceBackupDomainReset(void)
{
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000258:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 800025c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  * @rmtoll BDCR         BDRST         LL_RCC_ReleaseBackupDomainReset
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ReleaseBackupDomainReset(void)
{
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8000264:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 8000268:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800026c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8000270:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 8000274:	f043 0301 	orr.w	r3, r3, #1
 8000278:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 800027c:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 8000280:	0798      	lsls	r0, r3, #30
 8000282:	d5fb      	bpl.n	800027c <SystemClock_LSE_and_RTC_Config+0x40>
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8000284:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 8000288:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800028c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000290:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  SET_BIT(RCC->BDCR, RCC_BDCR_RTCEN);
 8000294:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
 8000298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800029c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_DisableWriteProtection(RTC_TypeDef *RTCx)
{
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 80002a0:	4b12      	ldr	r3, [pc, #72]	; (80002ec <SystemClock_LSE_and_RTC_Config+0xb0>)
 80002a2:	22ca      	movs	r2, #202	; 0xca
 80002a4:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 80002a6:	2253      	movs	r2, #83	; 0x53
 80002a8:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->ISR, RTC_LL_INIT_MASK);
 80002aa:	f04f 32ff 	mov.w	r2, #4294967295
 80002ae:	60da      	str	r2, [r3, #12]
  MODIFY_REG(RTCx->CR, RTC_CR_FMT, HourFormat);
 80002b0:	689a      	ldr	r2, [r3, #8]
 80002b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80002b6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_A, AsynchPrescaler << RTC_PRER_PREDIV_A_Pos);
 80002b8:	691a      	ldr	r2, [r3, #16]
 80002ba:	f442 02fe 	orr.w	r2, r2, #8323072	; 0x7f0000
 80002be:	611a      	str	r2, [r3, #16]
  MODIFY_REG(RTCx->PRER, RTC_PRER_PREDIV_S, SynchPrescaler);
 80002c0:	691a      	ldr	r2, [r3, #16]
 80002c2:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 80002c6:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
 80002ca:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
 80002ce:	611a      	str	r2, [r3, #16]
  WRITE_REG(RTCx->ISR, (uint32_t)~RTC_ISR_INIT);
 80002d0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80002d4:	60da      	str	r2, [r3, #12]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80002d6:	22ff      	movs	r2, #255	; 0xff
 80002d8:	625a      	str	r2, [r3, #36]	; 0x24
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_RS(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_RSF) == (RTC_ISR_RSF));
 80002da:	68da      	ldr	r2, [r3, #12]
		LL_RTC_SetAsynchPrescaler(RTC, RTC_ASYNCH_PREDIV);
		LL_RTC_SetSynchPrescaler(RTC, RTC_SYNCH_PREDIV);
		LL_RTC_DisableInitMode(RTC);        // end of init mode
		LL_RTC_EnableWriteProtection(RTC);     // allow write config

		while(LL_RTC_IsActiveFlag_RS(RTC) != 1);    // wait for RTC activation
 80002dc:	0692      	lsls	r2, r2, #26
 80002de:	d5fc      	bpl.n	80002da <SystemClock_LSE_and_RTC_Config+0x9e>
 80002e0:	bd08      	pop	{r3, pc}
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000
 80002e8:	40007000 	.word	0x40007000
 80002ec:	40002800 	.word	0x40002800

080002f0 <SystemClock_80MHz_HSE_Range1_Config>:
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80002f0:	4a1c      	ldr	r2, [pc, #112]	; (8000364 <SystemClock_80MHz_HSE_Range1_Config+0x74>)
 80002f2:	6813      	ldr	r3, [r2, #0]
 80002f4:	f023 0307 	bic.w	r3, r3, #7
 80002f8:	f043 0304 	orr.w	r3, r3, #4
 80002fc:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80002fe:	4b1a      	ldr	r3, [pc, #104]	; (8000368 <SystemClock_80MHz_HSE_Range1_Config+0x78>)
 8000300:	681a      	ldr	r2, [r3, #0]
 8000302:	f042 0201 	orr.w	r2, r2, #1
 8000306:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	0791      	lsls	r1, r2, #30
 800030c:	d5fc      	bpl.n	8000308 <SystemClock_80MHz_HSE_Range1_Config+0x18>
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800030e:	68d9      	ldr	r1, [r3, #12]
 8000310:	4a16      	ldr	r2, [pc, #88]	; (800036c <SystemClock_80MHz_HSE_Range1_Config+0x7c>)
 8000312:	400a      	ands	r2, r1
 8000314:	f442 5220 	orr.w	r2, r2, #10240	; 0x2800
 8000318:	f042 0201 	orr.w	r2, r2, #1
 800031c:	60da      	str	r2, [r3, #12]
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800031e:	681a      	ldr	r2, [r3, #0]
 8000320:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000324:	601a      	str	r2, [r3, #0]
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000326:	68da      	ldr	r2, [r3, #12]
 8000328:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 800032c:	60da      	str	r2, [r3, #12]
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800032e:	681a      	ldr	r2, [r3, #0]
 8000330:	0192      	lsls	r2, r2, #6
 8000332:	d5fc      	bpl.n	800032e <SystemClock_80MHz_HSE_Range1_Config+0x3e>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000334:	689a      	ldr	r2, [r3, #8]
 8000336:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800033a:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800033c:	689a      	ldr	r2, [r3, #8]
 800033e:	f042 0203 	orr.w	r2, r2, #3
 8000342:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000344:	689a      	ldr	r2, [r3, #8]
 8000346:	f002 020c 	and.w	r2, r2, #12
		{ };

	// Sysclk activation on the main PLL
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 800034a:	2a0c      	cmp	r2, #12
 800034c:	d1fa      	bne.n	8000344 <SystemClock_80MHz_HSE_Range1_Config+0x54>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800034e:	689a      	ldr	r2, [r3, #8]
 8000350:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000354:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000356:	689a      	ldr	r2, [r3, #8]
 8000358:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 800035c:	609a      	str	r2, [r3, #8]
	// Set APB1 & APB2 prescaler
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

	// Update the global variable called SystemCoreClock
	SystemCoreClockUpdate();
 800035e:	f000 ba87 	b.w	8000870 <SystemCoreClockUpdate>
 8000362:	bf00      	nop
 8000364:	40022000 	.word	0x40022000
 8000368:	40021000 	.word	0x40021000
 800036c:	f9ff808c 	.word	0xf9ff808c

08000370 <SystemClock_24MHz_MSI_Range1_Config>:
}

void SystemClock_24MHz_MSI_Range1_Config() {
 8000370:	b508      	push	{r3, lr}
	// enable clock to module PWR to set Voltage Range (range 1 for this function)
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000372:	f7ff ff53 	bl	800021c <LL_APB1_GRP1_EnableClock.constprop.8>
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000376:	4a20      	ldr	r2, [pc, #128]	; (80003f8 <SystemClock_24MHz_MSI_Range1_Config+0x88>)
 8000378:	6813      	ldr	r3, [r2, #0]
 800037a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800037e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000382:	6013      	str	r3, [r2, #0]
 8000384:	f502 32d8 	add.w	r2, r2, #110592	; 0x1b000
 8000388:	6813      	ldr	r3, [r2, #0]
 800038a:	f023 0307 	bic.w	r3, r3, #7
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000394:	4b19      	ldr	r3, [pc, #100]	; (80003fc <SystemClock_24MHz_MSI_Range1_Config+0x8c>)
 8000396:	681a      	ldr	r2, [r3, #0]
 8000398:	f042 0208 	orr.w	r2, r2, #8
 800039c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800039e:	681a      	ldr	r2, [r3, #0]
 80003a0:	0711      	lsls	r1, r2, #28
 80003a2:	d422      	bmi.n	80003ea <SystemClock_24MHz_MSI_Range1_Config+0x7a>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	f042 0201 	orr.w	r2, r2, #1
 80003aa:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80003ac:	681a      	ldr	r2, [r3, #0]
 80003ae:	0792      	lsls	r2, r2, #30
 80003b0:	d5fc      	bpl.n	80003ac <SystemClock_24MHz_MSI_Range1_Config+0x3c>
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80003b2:	681a      	ldr	r2, [r3, #0]
 80003b4:	f022 0204 	bic.w	r2, r2, #4
 80003b8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80003ba:	689a      	ldr	r2, [r3, #8]
 80003bc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80003c0:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80003c2:	689a      	ldr	r2, [r3, #8]
 80003c4:	f022 0203 	bic.w	r2, r2, #3
 80003c8:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80003ca:	689a      	ldr	r2, [r3, #8]
	LL_RCC_MSI_DisablePLLMode();

	// Sysclk activation with MSI clock
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 80003cc:	f012 0f0c 	tst.w	r2, #12
 80003d0:	d1fb      	bne.n	80003ca <SystemClock_24MHz_MSI_Range1_Config+0x5a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80003d2:	689a      	ldr	r2, [r3, #8]
 80003d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80003d8:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80003da:	689a      	ldr	r2, [r3, #8]
 80003dc:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 80003e0:	609a      	str	r2, [r3, #8]
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

	// Update the global variable called SystemCoreClock
	SystemCoreClockUpdate();
}
 80003e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SystemCoreClockUpdate();
 80003e6:	f000 ba43 	b.w	8000870 <SystemCoreClockUpdate>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 80003ea:	681a      	ldr	r2, [r3, #0]
 80003ec:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80003f0:	f042 0290 	orr.w	r2, r2, #144	; 0x90
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	e7d5      	b.n	80003a4 <SystemClock_24MHz_MSI_Range1_Config+0x34>
 80003f8:	40007000 	.word	0x40007000
 80003fc:	40021000 	.word	0x40021000

08000400 <SystemClock_24MHz_MSI_Range2_Config>:

void SystemClock_24MHz_MSI_Range2_Config() {
 8000400:	b508      	push	{r3, lr}
	// enable clock to module PWR to set Voltage Range (range 2 for this function)
	LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000402:	f7ff ff0b 	bl	800021c <LL_APB1_GRP1_EnableClock.constprop.8>
 8000406:	4a20      	ldr	r2, [pc, #128]	; (8000488 <SystemClock_24MHz_MSI_Range2_Config+0x88>)
 8000408:	6813      	ldr	r3, [r2, #0]
 800040a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800040e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000412:	6013      	str	r3, [r2, #0]
 8000414:	f502 32d8 	add.w	r2, r2, #110592	; 0x1b000
 8000418:	6813      	ldr	r3, [r2, #0]
 800041a:	f023 0307 	bic.w	r3, r3, #7
 800041e:	f043 0303 	orr.w	r3, r3, #3
 8000422:	6013      	str	r3, [r2, #0]
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 8000424:	4b19      	ldr	r3, [pc, #100]	; (800048c <SystemClock_24MHz_MSI_Range2_Config+0x8c>)
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	f042 0208 	orr.w	r2, r2, #8
 800042c:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800042e:	681a      	ldr	r2, [r3, #0]
 8000430:	0711      	lsls	r1, r2, #28
 8000432:	d422      	bmi.n	800047a <SystemClock_24MHz_MSI_Range2_Config+0x7a>
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8000434:	681a      	ldr	r2, [r3, #0]
 8000436:	f042 0201 	orr.w	r2, r2, #1
 800043a:	601a      	str	r2, [r3, #0]
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	0792      	lsls	r2, r2, #30
 8000440:	d5fc      	bpl.n	800043c <SystemClock_24MHz_MSI_Range2_Config+0x3c>
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000442:	681a      	ldr	r2, [r3, #0]
 8000444:	f022 0204 	bic.w	r2, r2, #4
 8000448:	601a      	str	r2, [r3, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 800044a:	689a      	ldr	r2, [r3, #8]
 800044c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000450:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000452:	689a      	ldr	r2, [r3, #8]
 8000454:	f022 0203 	bic.w	r2, r2, #3
 8000458:	609a      	str	r2, [r3, #8]
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800045a:	689a      	ldr	r2, [r3, #8]
	LL_RCC_MSI_DisablePLLMode();

	// Sysclk activation with MSI clock
	LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
	LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_MSI);
	while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_MSI)
 800045c:	f012 0f0c 	tst.w	r2, #12
 8000460:	d1fb      	bne.n	800045a <SystemClock_24MHz_MSI_Range2_Config+0x5a>
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000462:	689a      	ldr	r2, [r3, #8]
 8000464:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8000468:	609a      	str	r2, [r3, #8]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800046a:	689a      	ldr	r2, [r3, #8]
 800046c:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
 8000470:	609a      	str	r2, [r3, #8]
	LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
	LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);

	// Update the global variable called SystemCoreClock
	SystemCoreClockUpdate();
}
 8000472:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SystemCoreClockUpdate();
 8000476:	f000 b9fb 	b.w	8000870 <SystemCoreClockUpdate>
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000480:	f042 0290 	orr.w	r2, r2, #144	; 0x90
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	e7d5      	b.n	8000434 <SystemClock_24MHz_MSI_Range2_Config+0x34>
 8000488:	40007000 	.word	0x40007000
 800048c:	40021000 	.word	0x40021000

08000490 <RTC_wakeup_init>:
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000490:	4b13      	ldr	r3, [pc, #76]	; (80004e0 <RTC_wakeup_init+0x50>)
 8000492:	22ca      	movs	r2, #202	; 0xca
 8000494:	625a      	str	r2, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 8000496:	2253      	movs	r2, #83	; 0x53
 8000498:	625a      	str	r2, [r3, #36]	; 0x24
  CLEAR_BIT(RTCx->CR, RTC_CR_WUTE);
 800049a:	6899      	ldr	r1, [r3, #8]
 800049c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80004a0:	6099      	str	r1, [r3, #8]
  * @param  RTCx RTC Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RTC_IsActiveFlag_WUTW(RTC_TypeDef *RTCx)
{
  return (READ_BIT(RTCx->ISR, RTC_ISR_WUTWF) == (RTC_ISR_WUTWF));
 80004a2:	68da      	ldr	r2, [r3, #12]
/* init wake up with specific delay(s) */
void RTC_wakeup_init( int delay )
{
	LL_RTC_DisableWriteProtection( RTC );
	LL_RTC_WAKEUP_Disable( RTC );
	while	( !LL_RTC_IsActiveFlag_WUTW( RTC ) ) { }
 80004a4:	0752      	lsls	r2, r2, #29
 80004a6:	d5fc      	bpl.n	80004a2 <RTC_wakeup_init+0x12>
  MODIFY_REG(RTCx->CR, RTC_CR_WUCKSEL, WakeupClock);
 80004a8:	6899      	ldr	r1, [r3, #8]
 80004aa:	f021 0107 	bic.w	r1, r1, #7
 80004ae:	f041 0104 	orr.w	r1, r1, #4
 80004b2:	6099      	str	r1, [r3, #8]
  MODIFY_REG(RTCx->WUTR, RTC_WUTR_WUT, Value);
 80004b4:	695a      	ldr	r2, [r3, #20]
 80004b6:	0c12      	lsrs	r2, r2, #16
 80004b8:	0412      	lsls	r2, r2, #16
 80004ba:	4302      	orrs	r2, r0
 80004bc:	615a      	str	r2, [r3, #20]
  WRITE_REG(RTCx->ISR, (~((RTC_ISR_WUTF | RTC_ISR_INIT) & 0x0000FFFFU) | (RTCx->ISR & RTC_ISR_INIT)));
 80004be:	68da      	ldr	r2, [r3, #12]
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	f462 6290 	orn	r2, r2, #1152	; 0x480
 80004c6:	60da      	str	r2, [r3, #12]
  * @param  RTCx RTC Instance
  * @retval None
  */
__STATIC_INLINE void LL_RTC_EnableIT_WUT(RTC_TypeDef *RTCx)
{
  SET_BIT(RTCx->CR, RTC_CR_WUTIE);
 80004c8:	689a      	ldr	r2, [r3, #8]
 80004ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80004ce:	609a      	str	r2, [r3, #8]
  SET_BIT(RTCx->CR, RTC_CR_WUTE);
 80004d0:	689a      	ldr	r2, [r3, #8]
 80004d2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80004d6:	609a      	str	r2, [r3, #8]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 80004d8:	22ff      	movs	r2, #255	; 0xff
 80004da:	625a      	str	r2, [r3, #36]	; 0x24
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	40002800 	.word	0x40002800

080004e4 <RTC_wakeup_init_from_standby_or_shutdown>:
	LL_RTC_EnableWriteProtection(RTC);
}

/* init wakeup mode from STANDBY/SHUTDOWN mode */
void RTC_wakeup_init_from_standby_or_shutdown( int delay )
{
 80004e4:	b508      	push	{r3, lr}
	RTC_wakeup_init( delay );
 80004e6:	f7ff ffd3 	bl	8000490 <RTC_wakeup_init>
  * @rmtoll CR3          EIWF          LL_PWR_EnableInternWU
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableInternWU(void)
{
  SET_BIT(PWR->CR3, PWR_CR3_EIWF);
 80004ea:	4a03      	ldr	r2, [pc, #12]	; (80004f8 <RTC_wakeup_init_from_standby_or_shutdown+0x14>)
 80004ec:	6893      	ldr	r3, [r2, #8]
 80004ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80004f2:	6093      	str	r3, [r2, #8]
 80004f4:	bd08      	pop	{r3, pc}
 80004f6:	bf00      	nop
 80004f8:	40007000 	.word	0x40007000

080004fc <RTC_wakeup_init_from_stop>:
	LL_PWR_EnableInternWU();	// enable the Internal Wake-up line
}

/* init wakeup mode from STOPx mode */
void RTC_wakeup_init_from_stop( int delay )
{
 80004fc:	b508      	push	{r3, lr}
	RTC_wakeup_init( delay );
 80004fe:	f7ff ffc7 	bl	8000490 <RTC_wakeup_init>
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000502:	4b08      	ldr	r3, [pc, #32]	; (8000524 <RTC_wakeup_init_from_stop+0x28>)
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800050a:	601a      	str	r2, [r3, #0]
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800050c:	689a      	ldr	r2, [r3, #8]
 800050e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000512:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000514:	4b04      	ldr	r3, [pc, #16]	; (8000528 <RTC_wakeup_init_from_stop+0x2c>)
 8000516:	2210      	movs	r2, #16
 8000518:	f883 2303 	strb.w	r2, [r3, #771]	; 0x303
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800051c:	2208      	movs	r2, #8
 800051e:	601a      	str	r2, [r3, #0]
 8000520:	bd08      	pop	{r3, pc}
 8000522:	bf00      	nop
 8000524:	40010400 	.word	0x40010400
 8000528:	e000e100 	.word	0xe000e100

0800052c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800052c:	b530      	push	{r4, r5, lr}
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800052e:	6803      	ldr	r3, [r0, #0]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000530:	fa91 f4a1 	rbit	r4, r1
 8000534:	fab4 f484 	clz	r4, r4
 8000538:	fa91 f1a1 	rbit	r1, r1
 800053c:	2503      	movs	r5, #3
 800053e:	fab1 f181 	clz	r1, r1
 8000542:	0064      	lsls	r4, r4, #1
 8000544:	fa05 f404 	lsl.w	r4, r5, r4
 8000548:	0049      	lsls	r1, r1, #1
 800054a:	ea23 0304 	bic.w	r3, r3, r4
 800054e:	fa02 f101 	lsl.w	r1, r2, r1
 8000552:	4319      	orrs	r1, r3
 8000554:	6001      	str	r1, [r0, #0]
 8000556:	bd30      	pop	{r4, r5, pc}

08000558 <GPIO_init>:
#define BUT_PORT GPIOC
#define BUT_PIN LL_GPIO_PIN_13


void GPIO_init(void)
{
 8000558:	b513      	push	{r0, r1, r4, lr}
  SET_BIT(RCC->AHB2ENR, Periphs);
 800055a:	4c19      	ldr	r4, [pc, #100]	; (80005c0 <GPIO_init+0x68>)
 800055c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800055e:	f043 0301 	orr.w	r3, r3, #1
 8000562:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000564:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	9301      	str	r3, [sp, #4]
// PORT A
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOA );
// LED verte
LL_GPIO_SetPinMode(       LED_PORT, LED_PIN, LL_GPIO_MODE_OUTPUT );
 800056c:	2201      	movs	r2, #1
 800056e:	2120      	movs	r1, #32
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  (void)tmpreg;
 8000574:	9b01      	ldr	r3, [sp, #4]
 8000576:	f7ff ffd9 	bl	800052c <LL_GPIO_SetPinMode>
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800057a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000


// PORT C
LL_AHB2_GRP1_EnableClock( LL_AHB2_GRP1_PERIPH_GPIOC );
// bouton bleu pin 13
LL_GPIO_SetPinMode( BUT_PORT, BUT_PIN, LL_GPIO_MODE_INPUT );
 800057e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000582:	6853      	ldr	r3, [r2, #4]
 8000584:	f023 0320 	bic.w	r3, r3, #32
 8000588:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800058a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	64e3      	str	r3, [r4, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000592:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000594:	4c0b      	ldr	r4, [pc, #44]	; (80005c4 <GPIO_init+0x6c>)
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	4620      	mov	r0, r4
 800059e:	2200      	movs	r2, #0
  (void)tmpreg;
 80005a0:	9b00      	ldr	r3, [sp, #0]
 80005a2:	f7ff ffc3 	bl	800052c <LL_GPIO_SetPinMode>

/* initialise PC-10 for 50Hz pulse: mode OUTPUT PUSHPULL */
LL_GPIO_SetPinMode( OUT_50HZ_PORT, OUT_50HZ_PIN, LL_GPIO_MODE_OUTPUT );
 80005a6:	2201      	movs	r2, #1
 80005a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005ac:	4620      	mov	r0, r4
 80005ae:	f7ff ffbd 	bl	800052c <LL_GPIO_SetPinMode>
 80005b2:	6863      	ldr	r3, [r4, #4]
 80005b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80005b8:	6063      	str	r3, [r4, #4]
LL_GPIO_SetPinOutputType( OUT_50HZ_PORT, OUT_50HZ_PIN, LL_GPIO_OUTPUT_PUSHPULL);

}
 80005ba:	b002      	add	sp, #8
 80005bc:	bd10      	pop	{r4, pc}
 80005be:	bf00      	nop
 80005c0:	40021000 	.word	0x40021000
 80005c4:	48000800 	.word	0x48000800

080005c8 <LED_GREEN>:


void LED_GREEN( int val )
{
 80005c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80005cc:	2220      	movs	r2, #32
if	( val )
 80005ce:	b108      	cbz	r0, 80005d4 <LED_GREEN+0xc>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 80005d0:	619a      	str	r2, [r3, #24]
 80005d2:	4770      	bx	lr
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80005d4:	629a      	str	r2, [r3, #40]	; 0x28
 80005d6:	4770      	bx	lr

080005d8 <BLUE_BUTTON>:
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <BLUE_BUTTON+0x10>)
 80005da:	6918      	ldr	r0, [r3, #16]
else	LL_GPIO_ResetOutputPin( LED_PORT, LED_PIN );
}

int BLUE_BUTTON()
{
return ( !LL_GPIO_IsInputPinSet( BUT_PORT, BUT_PIN ) );
 80005dc:	f480 5000 	eor.w	r0, r0, #8192	; 0x2000
}
 80005e0:	f3c0 3040 	ubfx	r0, r0, #13, #1
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	48000800 	.word	0x48000800

080005ec <LL_PWR_SetPowerMode>:
  MODIFY_REG(PWR->CR1, PWR_CR1_LPMS, LowPowerMode);
 80005ec:	4a03      	ldr	r2, [pc, #12]	; (80005fc <LL_PWR_SetPowerMode+0x10>)
 80005ee:	6813      	ldr	r3, [r2, #0]
 80005f0:	f023 0307 	bic.w	r3, r3, #7
 80005f4:	4318      	orrs	r0, r3
 80005f6:	6010      	str	r0, [r2, #0]
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop
 80005fc:	40007000 	.word	0x40007000

08000600 <main>:
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000600:	4d2d      	ldr	r5, [pc, #180]	; (80006b8 <main+0xb8>)

/* retrieve then increment the expe value stored in rtc bkup register 0 */
LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);   // enable clock to backup domain
LL_PWR_EnableBkUpAccess();							// enable access to backup domain
LL_RTC_DisableWriteProtection(RTC);					// disable write protection on RTC
expe = LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0); // read value on bkup register (expe incremented from last reset)
 8000602:	4c2e      	ldr	r4, [pc, #184]	; (80006bc <main+0xbc>)
                                                                                      {
 8000604:	b507      	push	{r0, r1, r2, lr}
SystemClock_LSE_and_RTC_Config();  // GOT SOME PROBLEM WITH THIS: LSE ALWAYS ON, NOT SURE HOW TO FIX THIS
 8000606:	f7ff fe19 	bl	800023c <SystemClock_LSE_and_RTC_Config>
 800060a:	6dab      	ldr	r3, [r5, #88]	; 0x58
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800060c:	492c      	ldr	r1, [pc, #176]	; (80006c0 <main+0xc0>)
 800060e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000612:	65ab      	str	r3, [r5, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000614:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
 800061c:	9b01      	ldr	r3, [sp, #4]
 800061e:	680b      	ldr	r3, [r1, #0]
 8000620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000624:	600b      	str	r3, [r1, #0]
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_1);
 8000626:	4b27      	ldr	r3, [pc, #156]	; (80006c4 <main+0xc4>)
 8000628:	21ca      	movs	r1, #202	; 0xca
 800062a:	6259      	str	r1, [r3, #36]	; 0x24
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_ENABLE_2);
 800062c:	2153      	movs	r1, #83	; 0x53
 800062e:	6259      	str	r1, [r3, #36]	; 0x24
  return (*(__IO uint32_t *)tmp);
 8000630:	6d19      	ldr	r1, [r3, #80]	; 0x50
expe = LL_RTC_BAK_GetRegister(RTC, LL_RTC_BKP_DR0); // read value on bkup register (expe incremented from last reset)
 8000632:	6021      	str	r1, [r4, #0]
if (expe == 0) 	expe = 1;
 8000634:	b909      	cbnz	r1, 800063a <main+0x3a>
 8000636:	2201      	movs	r2, #1
 8000638:	6022      	str	r2, [r4, #0]
LL_RTC_BAK_SetRegister(RTC, LL_RTC_BKP_DR0, (expe == 8) ? 1 : expe + 1);		// write back into bkup domain expe incremented
 800063a:	6822      	ldr	r2, [r4, #0]
 800063c:	2a08      	cmp	r2, #8
 800063e:	bf14      	ite	ne
 8000640:	1c51      	addne	r1, r2, #1
 8000642:	2101      	moveq	r1, #1
  *(__IO uint32_t *)tmp = (uint32_t)Data;
 8000644:	6519      	str	r1, [r3, #80]	; 0x50
LL_RTC_EnableWriteProtection(RTC);		// reactivate write protection on RTC

/* depending on which expe we are on, choose a correct clock configuration */
if (expe == 1) {
 8000646:	2a01      	cmp	r2, #1
  WRITE_REG(RTCx->WPR, RTC_WRITE_PROTECTION_DISABLE);
 8000648:	f04f 01ff 	mov.w	r1, #255	; 0xff
 800064c:	6259      	str	r1, [r3, #36]	; 0x24
 800064e:	d123      	bne.n	8000698 <main+0x98>
	SystemClock_80MHz_HSE_Range1_Config();
 8000650:	f7ff fe4e 	bl	80002f0 <SystemClock_80MHz_HSE_Range1_Config>
		LL_RCC_MSI_EnablePLLMode();
	}
}

/* init variables */
bbleu = 0;
 8000654:	4b1c      	ldr	r3, [pc, #112]	; (80006c8 <main+0xc8>)
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
led_counter = 0;
 800065a:	4b1c      	ldr	r3, [pc, #112]	; (80006cc <main+0xcc>)
 800065c:	601a      	str	r2, [r3, #0]
impulsion_base = 5;   // in 10ms
 800065e:	4b1c      	ldr	r3, [pc, #112]	; (80006d0 <main+0xd0>)
 8000660:	2105      	movs	r1, #5
 8000662:	6019      	str	r1, [r3, #0]
high = 0;
 8000664:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <main+0xd4>)
 8000666:	601a      	str	r2, [r3, #0]
debounce = 0;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <main+0xd8>)
 800066a:	601a      	str	r2, [r3, #0]

/* configure SysTick clock to have exactly 10ms per interrupt */
SysTick_Config(SystemCoreClock/100);
 800066c:	4b1b      	ldr	r3, [pc, #108]	; (80006dc <main+0xdc>)
 800066e:	2164      	movs	r1, #100	; 0x64
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	fbb3 f3f1 	udiv	r3, r3, r1
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000676:	3b01      	subs	r3, #1
 8000678:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800067c:	d208      	bcs.n	8000690 <main+0x90>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800067e:	4918      	ldr	r1, [pc, #96]	; (80006e0 <main+0xe0>)
 8000680:	604b      	str	r3, [r1, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <main+0xe4>)
 8000684:	20f0      	movs	r0, #240	; 0xf0
 8000686:	f883 0023 	strb.w	r0, [r3, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068a:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800068c:	608a      	str	r2, [r1, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800068e:	600b      	str	r3, [r1, #0]

/* configure GPIO */
GPIO_init();
 8000690:	f7ff ff62 	bl	8000558 <GPIO_init>

__WFI();
 8000694:	bf30      	wfi
 8000696:	e7fe      	b.n	8000696 <main+0x96>
}else if (expe == 2) {
 8000698:	2a02      	cmp	r2, #2
 800069a:	d102      	bne.n	80006a2 <main+0xa2>
	SystemClock_24MHz_MSI_Range1_Config();
 800069c:	f7ff fe68 	bl	8000370 <SystemClock_24MHz_MSI_Range1_Config>
 80006a0:	e7d8      	b.n	8000654 <main+0x54>
}else if (expe > 2) {
 80006a2:	ddd7      	ble.n	8000654 <main+0x54>
	SystemClock_24MHz_MSI_Range2_Config();
 80006a4:	f7ff feac 	bl	8000400 <SystemClock_24MHz_MSI_Range2_Config>
	if (expe > 4) { // for modes 5 to 8, always turn on calibration
 80006a8:	6823      	ldr	r3, [r4, #0]
 80006aa:	2b04      	cmp	r3, #4
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 80006ac:	bfc2      	ittt	gt
 80006ae:	682b      	ldrgt	r3, [r5, #0]
 80006b0:	f043 0304 	orrgt.w	r3, r3, #4
 80006b4:	602b      	strgt	r3, [r5, #0]
 80006b6:	e7cd      	b.n	8000654 <main+0x54>
 80006b8:	40021000 	.word	0x40021000
 80006bc:	20000034 	.word	0x20000034
 80006c0:	40007000 	.word	0x40007000
 80006c4:	40002800 	.word	0x40002800
 80006c8:	2000002c 	.word	0x2000002c
 80006cc:	20000024 	.word	0x20000024
 80006d0:	20000020 	.word	0x20000020
 80006d4:	20000030 	.word	0x20000030
 80006d8:	20000028 	.word	0x20000028
 80006dc:	20000000 	.word	0x20000000
 80006e0:	e000e010 	.word	0xe000e010
 80006e4:	e000ed00 	.word	0xe000ed00

080006e8 <SysTick_Handler>:
while (1) ;

}

// SysTick IRQ
void SysTick_Handler() {
 80006e8:	b538      	push	{r3, r4, r5, lr}
	// turn on the LED with a variable impulsion width corresponding to the correct expe mode
	if (led_counter < impulsion_base*expe) {
 80006ea:	4b42      	ldr	r3, [pc, #264]	; (80007f4 <SysTick_Handler+0x10c>)
 80006ec:	4d42      	ldr	r5, [pc, #264]	; (80007f8 <SysTick_Handler+0x110>)
 80006ee:	4c43      	ldr	r4, [pc, #268]	; (80007fc <SysTick_Handler+0x114>)
 80006f0:	6819      	ldr	r1, [r3, #0]
 80006f2:	682b      	ldr	r3, [r5, #0]
 80006f4:	6822      	ldr	r2, [r4, #0]
 80006f6:	434b      	muls	r3, r1
 80006f8:	4293      	cmp	r3, r2
 80006fa:	dd32      	ble.n	8000762 <SysTick_Handler+0x7a>
		LED_GREEN(1);
 80006fc:	2001      	movs	r0, #1
		++led_counter;
	}else if (led_counter < 100) {
		LED_GREEN(0);
 80006fe:	f7ff ff63 	bl	80005c8 <LED_GREEN>
		++led_counter;
 8000702:	6823      	ldr	r3, [r4, #0]
 8000704:	3301      	adds	r3, #1
	}else {
		led_counter = 0;
 8000706:	6023      	str	r3, [r4, #0]
	}

	// blue button pressed detection with 100ms debouncing
	if (debounce > 0 && debounce < 10) {
 8000708:	4c3d      	ldr	r4, [pc, #244]	; (8000800 <SysTick_Handler+0x118>)
 800070a:	6823      	ldr	r3, [r4, #0]
 800070c:	1e5a      	subs	r2, r3, #1
 800070e:	2a08      	cmp	r2, #8
		debounce++;
 8000710:	bf94      	ite	ls
 8000712:	3301      	addls	r3, #1
	}else {
		debounce = 0;
 8000714:	2300      	movhi	r3, #0
 8000716:	6023      	str	r3, [r4, #0]
	}
	if (BLUE_BUTTON()) {
 8000718:	f7ff ff5e 	bl	80005d8 <BLUE_BUTTON>
 800071c:	b140      	cbz	r0, 8000730 <SysTick_Handler+0x48>
		// change mode
		if (debounce == 0) {
 800071e:	6823      	ldr	r3, [r4, #0]
 8000720:	b933      	cbnz	r3, 8000730 <SysTick_Handler+0x48>
			bbleu ^= 1;  // toggle bbleu. So it is possible to return to last state
 8000722:	4a38      	ldr	r2, [pc, #224]	; (8000804 <SysTick_Handler+0x11c>)
 8000724:	6813      	ldr	r3, [r2, #0]
 8000726:	f083 0301 	eor.w	r3, r3, #1
 800072a:	6013      	str	r3, [r2, #0]
			debounce = 1;
 800072c:	2301      	movs	r3, #1
 800072e:	6023      	str	r3, [r4, #0]
		}
	}

	// toggle pin PC10 to analyse systick freq, therefore evaluating the core clock precision
	if (high) LL_GPIO_SetOutputPin(OUT_50HZ_PORT, OUT_50HZ_PIN);
 8000730:	4b35      	ldr	r3, [pc, #212]	; (8000808 <SysTick_Handler+0x120>)
 8000732:	4936      	ldr	r1, [pc, #216]	; (800080c <SysTick_Handler+0x124>)
 8000734:	681a      	ldr	r2, [r3, #0]
 8000736:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800073a:	b1c2      	cbz	r2, 800076e <SysTick_Handler+0x86>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800073c:	6188      	str	r0, [r1, #24]
	else LL_GPIO_ResetOutputPin(OUT_50HZ_PORT, OUT_50HZ_PIN);
	high ^= 1;

	// cases to use expe
	if (expe == 1 || expe == 3) {
 800073e:	6829      	ldr	r1, [r5, #0]
	high ^= 1;
 8000740:	f082 0201 	eor.w	r2, r2, #1
 8000744:	601a      	str	r2, [r3, #0]
	if (expe == 1 || expe == 3) {
 8000746:	f021 0302 	bic.w	r3, r1, #2
 800074a:	2b01      	cmp	r3, #1
 800074c:	d111      	bne.n	8000772 <SysTick_Handler+0x8a>
		// push of button will toggle enable sleep on exit functionality
		if (bbleu == 0) {
 800074e:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <SysTick_Handler+0x11c>)
 8000750:	681a      	ldr	r2, [r3, #0]
 8000752:	4b2f      	ldr	r3, [pc, #188]	; (8000810 <SysTick_Handler+0x128>)
 8000754:	2a00      	cmp	r2, #0
 8000756:	d137      	bne.n	80007c8 <SysTick_Handler+0xe0>
  * @retval None
  */
__STATIC_INLINE void LL_LPM_DisableSleepOnExit(void)
{
  /* Clear SLEEPONEXIT bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8000758:	691a      	ldr	r2, [r3, #16]
 800075a:	f022 0202 	bic.w	r2, r2, #2
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	bd38      	pop	{r3, r4, r5, pc}
	}else if (led_counter < 100) {
 8000762:	2a63      	cmp	r2, #99	; 0x63
 8000764:	dc01      	bgt.n	800076a <SysTick_Handler+0x82>
		LED_GREEN(0);
 8000766:	2000      	movs	r0, #0
 8000768:	e7c9      	b.n	80006fe <SysTick_Handler+0x16>
		led_counter = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	e7cb      	b.n	8000706 <SysTick_Handler+0x1e>
  WRITE_REG(GPIOx->BRR, PinMask);
 800076e:	6288      	str	r0, [r1, #40]	; 0x28
 8000770:	e7e5      	b.n	800073e <SysTick_Handler+0x56>
			LL_LPM_DisableSleepOnExit();   // ensure that MCU stays awake after interrupt
		}else {
			LL_LPM_EnableSleepOnExit();    // send MCU to sleep after interrupt
		}
	}
	else if (expe == 2 || expe == 4) {
 8000772:	2902      	cmp	r1, #2
 8000774:	d001      	beq.n	800077a <SysTick_Handler+0x92>
 8000776:	2904      	cmp	r1, #4
 8000778:	d10c      	bne.n	8000794 <SysTick_Handler+0xac>
		// push of button will toggle MSI calibration with LSE
		if (bbleu == 0) {
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <SysTick_Handler+0x11c>)
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	4b25      	ldr	r3, [pc, #148]	; (8000814 <SysTick_Handler+0x12c>)
 8000780:	b922      	cbnz	r2, 800078c <SysTick_Handler+0xa4>
  CLEAR_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	f022 0204 	bic.w	r2, r2, #4
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN);
 8000788:	601a      	str	r2, [r3, #0]
 800078a:	bd38      	pop	{r3, r4, r5, pc}
 800078c:	681a      	ldr	r2, [r3, #0]
 800078e:	f042 0204 	orr.w	r2, r2, #4
 8000792:	e7f9      	b.n	8000788 <SysTick_Handler+0xa0>
			LL_RCC_MSI_DisablePLLMode();	// no calibration of MSI
		}else {
			LL_RCC_MSI_EnablePLLMode();		// calibration with MSI
		}
	}else if (expe > 4) {
 8000794:	dde4      	ble.n	8000760 <SysTick_Handler+0x78>
		if (bbleu == 0) {
 8000796:	4c1b      	ldr	r4, [pc, #108]	; (8000804 <SysTick_Handler+0x11c>)
 8000798:	6823      	ldr	r3, [r4, #0]
 800079a:	b92b      	cbnz	r3, 80007a8 <SysTick_Handler+0xc0>
 800079c:	4a1c      	ldr	r2, [pc, #112]	; (8000810 <SysTick_Handler+0x128>)
 800079e:	6913      	ldr	r3, [r2, #16]
 80007a0:	f043 0302 	orr.w	r3, r3, #2
 80007a4:	6113      	str	r3, [r2, #16]
 80007a6:	bd38      	pop	{r3, r4, r5, pc}
			LL_LPM_EnableSleepOnExit();
		}else {
			/* configure low power modes */
			if (expe == 5) {
 80007a8:	2905      	cmp	r1, #5
 80007aa:	d111      	bne.n	80007d0 <SysTick_Handler+0xe8>
				LL_PWR_SetPowerMode(LL_PWR_MODE_STOP0);
 80007ac:	2000      	movs	r0, #0
				RTC_wakeup_init_from_stop(5);	// enable RTC wakeup init from stop0 mode
				bbleu = 0;
				__WFI();
			}else if (expe == 6) {
				LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 80007ae:	f7ff ff1d 	bl	80005ec <LL_PWR_SetPowerMode>
				RTC_wakeup_init_from_stop(5);	// enable RTC wakeup init from stop1 mode
 80007b2:	2005      	movs	r0, #5
 80007b4:	f7ff fea2 	bl	80004fc <RTC_wakeup_init_from_stop>
				bbleu = 0;
 80007b8:	2300      	movs	r3, #0
 80007ba:	6023      	str	r3, [r4, #0]
				__WFI();
 80007bc:	bf30      	wfi
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 80007be:	4b14      	ldr	r3, [pc, #80]	; (8000810 <SysTick_Handler+0x128>)
 80007c0:	691a      	ldr	r2, [r3, #16]
 80007c2:	f042 0204 	orr.w	r2, r2, #4
 80007c6:	611a      	str	r2, [r3, #16]
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 80007c8:	691a      	ldr	r2, [r3, #16]
 80007ca:	f042 0202 	orr.w	r2, r2, #2
 80007ce:	e7c6      	b.n	800075e <SysTick_Handler+0x76>
			}else if (expe == 6) {
 80007d0:	2906      	cmp	r1, #6
 80007d2:	d101      	bne.n	80007d8 <SysTick_Handler+0xf0>
				LL_PWR_SetPowerMode(LL_PWR_MODE_STOP1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	e7ea      	b.n	80007ae <SysTick_Handler+0xc6>
			}else if (expe == 7) {
 80007d8:	2907      	cmp	r1, #7
 80007da:	d101      	bne.n	80007e0 <SysTick_Handler+0xf8>
				LL_PWR_SetPowerMode(LL_PWR_MODE_STOP2);
 80007dc:	2002      	movs	r0, #2
 80007de:	e7e6      	b.n	80007ae <SysTick_Handler+0xc6>
				RTC_wakeup_init_from_stop(5);	// enable RTC wakeup init from stop2 mode
				bbleu = 0;
				__WFI();
			}else if (expe == 8) {
 80007e0:	2908      	cmp	r1, #8
 80007e2:	d1ec      	bne.n	80007be <SysTick_Handler+0xd6>
				LL_PWR_SetPowerMode(LL_PWR_MODE_SHUTDOWN);
 80007e4:	2004      	movs	r0, #4
 80007e6:	f7ff ff01 	bl	80005ec <LL_PWR_SetPowerMode>
				RTC_wakeup_init_from_standby_or_shutdown(5);	// enable RTC wakeup init from stop mode
 80007ea:	2005      	movs	r0, #5
 80007ec:	f7ff fe7a 	bl	80004e4 <RTC_wakeup_init_from_standby_or_shutdown>
 80007f0:	e7e5      	b.n	80007be <SysTick_Handler+0xd6>
 80007f2:	bf00      	nop
 80007f4:	20000020 	.word	0x20000020
 80007f8:	20000034 	.word	0x20000034
 80007fc:	20000024 	.word	0x20000024
 8000800:	20000028 	.word	0x20000028
 8000804:	2000002c 	.word	0x2000002c
 8000808:	20000030 	.word	0x20000030
 800080c:	48000800 	.word	0x48000800
 8000810:	e000ed00 	.word	0xe000ed00
 8000814:	40021000 	.word	0x40021000

08000818 <RTC_WKUP_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR1, ExtiLine);
 8000818:	4b02      	ldr	r3, [pc, #8]	; (8000824 <RTC_WKUP_IRQHandler+0xc>)
 800081a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800081e:	615a      	str	r2, [r3, #20]
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40010400 	.word	0x40010400

08000828 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000828:	490f      	ldr	r1, [pc, #60]	; (8000868 <SystemInit+0x40>)
 800082a:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800082e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000832:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <SystemInit+0x44>)
 8000838:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800083a:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 800083c:	f042 0201 	orr.w	r2, r2, #1
 8000840:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 8000842:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000844:	681a      	ldr	r2, [r3, #0]
 8000846:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 800084a:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 800084e:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 8000850:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000854:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000856:	681a      	ldr	r2, [r3, #0]
 8000858:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800085c:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800085e:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000860:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000864:	608b      	str	r3, [r1, #8]
 8000866:	4770      	bx	lr
 8000868:	e000ed00 	.word	0xe000ed00
 800086c:	40021000 	.word	0x40021000

08000870 <SystemCoreClockUpdate>:
void SystemCoreClockUpdate(void)
{
  uint32_t tmp = 0, msirange = 0, pllvco = 0, pllr = 2, pllsource = 0, pllm = 2;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == RESET)
 8000870:	4a27      	ldr	r2, [pc, #156]	; (8000910 <SystemCoreClockUpdate+0xa0>)
 8000872:	4928      	ldr	r1, [pc, #160]	; (8000914 <SystemCoreClockUpdate+0xa4>)
 8000874:	6813      	ldr	r3, [r2, #0]
 8000876:	071b      	lsls	r3, r3, #28
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8;
 8000878:	bf54      	ite	pl
 800087a:	f8d2 3094 	ldrpl.w	r3, [r2, #148]	; 0x94
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4;
 800087e:	6813      	ldrmi	r3, [r2, #0]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000880:	6890      	ldr	r0, [r2, #8]
{
 8000882:	b530      	push	{r4, r5, lr}
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8;
 8000884:	bf54      	ite	pl
 8000886:	f3c3 2303 	ubfxpl	r3, r3, #8, #4
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4;
 800088a:	f3c3 1303 	ubfxmi	r3, r3, #4, #4
  msirange = MSIRangeTable[msirange];
 800088e:	4c22      	ldr	r4, [pc, #136]	; (8000918 <SystemCoreClockUpdate+0xa8>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000890:	f000 000c 	and.w	r0, r0, #12
  msirange = MSIRangeTable[msirange];
 8000894:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000898:	280c      	cmp	r0, #12
 800089a:	d836      	bhi.n	800090a <SystemCoreClockUpdate+0x9a>
 800089c:	e8df f000 	tbb	[pc, r0]
 80008a0:	35353535 	.word	0x35353535
 80008a4:	35353507 	.word	0x35353507
 80008a8:	35353513 	.word	0x35353513
 80008ac:	15          	.byte	0x15
 80008ad:	00          	.byte	0x00
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
      break;

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80008ae:	4b1b      	ldr	r3, [pc, #108]	; (800091c <SystemCoreClockUpdate+0xac>)
          pllvco = (msirange / pllm);
          break;
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
      SystemCoreClock = pllvco/pllr;
 80008b0:	600b      	str	r3, [r1, #0]
      SystemCoreClock = msirange;
      break;
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80008b2:	6893      	ldr	r3, [r2, #8]
 80008b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80008b8:	441c      	add	r4, r3
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 80008ba:	680b      	ldr	r3, [r1, #0]
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 80008bc:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
  SystemCoreClock >>= tmp;
 80008c0:	40d3      	lsrs	r3, r2
 80008c2:	600b      	str	r3, [r1, #0]
 80008c4:	bd30      	pop	{r4, r5, pc}
      SystemCoreClock = HSE_VALUE;
 80008c6:	4b16      	ldr	r3, [pc, #88]	; (8000920 <SystemCoreClockUpdate+0xb0>)
 80008c8:	e7f2      	b.n	80008b0 <SystemCoreClockUpdate+0x40>
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80008ca:	68d0      	ldr	r0, [r2, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1 ;
 80008cc:	68d3      	ldr	r3, [r2, #12]
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80008ce:	f000 0003 	and.w	r0, r0, #3
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1 ;
 80008d2:	f3c3 1302 	ubfx	r3, r3, #4, #3
      switch (pllsource)
 80008d6:	2802      	cmp	r0, #2
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4) + 1 ;
 80008d8:	f103 0301 	add.w	r3, r3, #1
      switch (pllsource)
 80008dc:	d004      	beq.n	80008e8 <SystemCoreClockUpdate+0x78>
 80008de:	2803      	cmp	r0, #3
 80008e0:	d011      	beq.n	8000906 <SystemCoreClockUpdate+0x96>
          pllvco = (msirange / pllm);
 80008e2:	fbb5 f3f3 	udiv	r3, r5, r3
          break;
 80008e6:	e002      	b.n	80008ee <SystemCoreClockUpdate+0x7e>
          pllvco = (HSI_VALUE / pllm);
 80008e8:	480c      	ldr	r0, [pc, #48]	; (800091c <SystemCoreClockUpdate+0xac>)
          pllvco = (HSE_VALUE / pllm);
 80008ea:	fbb0 f3f3 	udiv	r3, r0, r3
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 80008ee:	68d5      	ldr	r5, [r2, #12]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
 80008f0:	68d0      	ldr	r0, [r2, #12]
 80008f2:	f3c0 6041 	ubfx	r0, r0, #25, #2
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 80008f6:	f3c5 2506 	ubfx	r5, r5, #8, #7
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
 80008fa:	3001      	adds	r0, #1
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8);
 80008fc:	436b      	muls	r3, r5
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25) + 1) * 2;
 80008fe:	0040      	lsls	r0, r0, #1
      SystemCoreClock = pllvco/pllr;
 8000900:	fbb3 f3f0 	udiv	r3, r3, r0
 8000904:	e7d4      	b.n	80008b0 <SystemCoreClockUpdate+0x40>
          pllvco = (HSE_VALUE / pllm);
 8000906:	4806      	ldr	r0, [pc, #24]	; (8000920 <SystemCoreClockUpdate+0xb0>)
 8000908:	e7ef      	b.n	80008ea <SystemCoreClockUpdate+0x7a>
      SystemCoreClock = msirange;
 800090a:	600d      	str	r5, [r1, #0]
      break;
 800090c:	e7d1      	b.n	80008b2 <SystemCoreClockUpdate+0x42>
 800090e:	bf00      	nop
 8000910:	40021000 	.word	0x40021000
 8000914:	20000000 	.word	0x20000000
 8000918:	08000984 	.word	0x08000984
 800091c:	00f42400 	.word	0x00f42400
 8000920:	007a1200 	.word	0x007a1200

08000924 <__libc_init_array>:
 8000924:	b570      	push	{r4, r5, r6, lr}
 8000926:	4e0d      	ldr	r6, [pc, #52]	; (800095c <__libc_init_array+0x38>)
 8000928:	4c0d      	ldr	r4, [pc, #52]	; (8000960 <__libc_init_array+0x3c>)
 800092a:	1ba4      	subs	r4, r4, r6
 800092c:	10a4      	asrs	r4, r4, #2
 800092e:	2500      	movs	r5, #0
 8000930:	42a5      	cmp	r5, r4
 8000932:	d109      	bne.n	8000948 <__libc_init_array+0x24>
 8000934:	4e0b      	ldr	r6, [pc, #44]	; (8000964 <__libc_init_array+0x40>)
 8000936:	4c0c      	ldr	r4, [pc, #48]	; (8000968 <__libc_init_array+0x44>)
 8000938:	f000 f818 	bl	800096c <_init>
 800093c:	1ba4      	subs	r4, r4, r6
 800093e:	10a4      	asrs	r4, r4, #2
 8000940:	2500      	movs	r5, #0
 8000942:	42a5      	cmp	r5, r4
 8000944:	d105      	bne.n	8000952 <__libc_init_array+0x2e>
 8000946:	bd70      	pop	{r4, r5, r6, pc}
 8000948:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800094c:	4798      	blx	r3
 800094e:	3501      	adds	r5, #1
 8000950:	e7ee      	b.n	8000930 <__libc_init_array+0xc>
 8000952:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000956:	4798      	blx	r3
 8000958:	3501      	adds	r5, #1
 800095a:	e7f2      	b.n	8000942 <__libc_init_array+0x1e>
 800095c:	080009cc 	.word	0x080009cc
 8000960:	080009cc 	.word	0x080009cc
 8000964:	080009cc 	.word	0x080009cc
 8000968:	080009d0 	.word	0x080009d0

0800096c <_init>:
 800096c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800096e:	bf00      	nop
 8000970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000972:	bc08      	pop	{r3}
 8000974:	469e      	mov	lr, r3
 8000976:	4770      	bx	lr

08000978 <_fini>:
 8000978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097a:	bf00      	nop
 800097c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800097e:	bc08      	pop	{r3}
 8000980:	469e      	mov	lr, r3
 8000982:	4770      	bx	lr
